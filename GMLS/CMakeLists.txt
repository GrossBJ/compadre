add_subdirectory(src)

#cmake_minimum_required(VERSION 2.8)
#
##
##       Build GMLS library
##
#PROJECT(GMLS)
#INCLUDE_DIRECTORIES(.)
#SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
#SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib )
#SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib )
#SET( GMLS_VERSION_MAJOR 0)
#SET( GMLS_VERSION_MINOR 3)
#
#FILE(GLOB GMLS_CPPFILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
#IF(BUILD_SHARED_GMLS_LIBRARY)
#  ADD_LIBRARY( GMLS_LIBRARIES SHARED ${GMLS_CPPFILES})
#ELSE()
#  ADD_LIBRARY( GMLS_LIBRARIES STATIC ${GMLS_CPPFILES})
#ENDIF(BUILD_SHARED_GMLS_LIBRARY)
#SET_TARGET_PROPERTIES( GMLS_LIBRARIES
#  PROPERTIES
#  ARCHIVE_OUTPUT_DIRECTORY lib
#  LIBRARY_OUTPUT_DIRECTORY lib
#)
#
#IF(USE_KOKKOS)
#IF ((KokkosTrilinosID EQUAL -1) OR NOT (KokkosTrilinosID) )
#  #
#  #   KOKKOS Standalone
#  #
#  INCLUDE(${COMPADRE_KOKKOS_DIR}/kokkos_generated_settings.cmake OPTIONAL)
#  IF (NOT KOKKOS_CXX_FLAGS) 
#    INCLUDE($ENV{KOKKOS_ROOT}/kokkos_generated_settings.cmake OPTIONAL)
#  ENDIF()
#  IF (KOKKOS_CXX_FLAGS) 
#    FOREACH(arg ${KOKKOS_CXX_FLAGS} )
#      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${arg}")
#    ENDFOREACH()
#    MESSAGE(STATUS "${CMAKE_CXX_FLAGS}")
#  ENDIF()
#  
#  MESSAGE("First attempting to use Kokkos specified in -DCOMPADRE_KOKKOS_DIR, then $KOKKOS_ROOT: " ${COMPADRE_KOKKOS_DIR} ", then) " $ENV{KOKKOS_ROOT})
#  FIND_LIBRARY(Kokkos_LIBRARIES NAMES kokkos PATHS ${COMPADRE_KOKKOS_DIR}/lib $ENV{KOKKOS_ROOT}/lib NO_DEFAULT_PATH)
#  FIND_PATH(Kokkos_INCLUDE_DIR NAMES Kokkos_Core.hpp PATHS ${COMPADRE_KOKKOS_DIR}/include $ENV{KOKKOS_ROOT}/include NO_DEFAULT_PATH)
#  FIND_LIBRARY(HWLOC_LIBRARIES NAMES hwloc)
#  IF(Kokkos_LIBRARIES AND Kokkos_INCLUDE_DIR)
#    MESSAGE("KOKKOS_LIBRARIES = ${Kokkos_LIBRARIES}")
#    INCLUDE_DIRECTORIES(${Kokkos_INCLUDE_DIR})
#    #LINK_DIRECTORIES($ENV{KOKKOS_ROOT}/lib)
#  ELSE()
#    IF (DEFINED COMPADRE_KOKKOS_DIR)
#      SET(CMAKE_PREFIX_PATH ${COMPADRE_KOKKOS_DIR} ${CMAKE_PREFIX_PATH})
#    ELSEIF (DEFINED ENV{KOKKOS_ROOT})
#      SET(CMAKE_PREFIX_PATH $ENV{KOKKOS_ROOT} ${CMAKE_PREFIX_PATH})
#    ELSEIF (DEFINED COMPADRE_TRILINOS_DIR)
#      SET(CMAKE_PREFIX_PATH ${COMPADRE_TRILINOS_DIR}/lib/cmake/Kokkos ${CMAKE_PREFIX_PATH})
#    ENDIF()
#    FIND_PACKAGE(Kokkos QUIET)
#    IF(Kokkos_CONFIG_INCLUDED)
#      MESSAGE("KOKKOS_LIB_DIR = ${Kokkos_LIBRARY_DIRS}")
#      MESSAGE("KOKKOS_LIBRARIES = ${Kokkos_LIBRARIES}")
#      MESSAGE("KOKKOS_TPL_LIBRARIES = ${Kokkos_TPL_LIBRARIES}")
#      LINK_LIBRARIES(${Kokkos_LIBRARIES})
#      LINK_LIBRARIES(${Kokkos_TPL_LIBRARIES})
#      INCLUDE_DIRECTORIES(${Kokkos_INCLUDE_DIRS})
#      INCLUDE_DIRECTORIES(${Kokkos_TPL_INCLUDE_DIRS})
#    ELSE()
#      MESSAGE(FATAL_ERROR "CMake ERROR : could not find Kokkos")
#    ENDIF()
#  ENDIF()
#ELSE()
#  #
#  #   KOKKOS in Trilinos
#  #
#  IF (Trilinos_CXX_COMPILER_FLAGS) 
#    FOREACH(arg ${Trilinos_CXX_COMPILER_FLAGS} )
#      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${arg}")
#    ENDFOREACH()
#  ENDIF()
#  TARGET_INCLUDE_DIRECTORIES(GMLS_LIBRARIES PUBLIC ${Trilinos_INCLUDE_DIRS})
#ENDIF()
#
#IF(USE_BOOST)
#  TARGET_INCLUDE_DIRECTORIES(GMLS_LIBRARIES PUBLIC ${BOOST_INC})
#ENDIF()
#
#CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/GMLS_Config.h.in" "${CMAKE_CURRENT_SOURCE_DIR}/src/GMLS_Config.h")
#TARGET_INCLUDE_DIRECTORIES(GMLS_LIBRARIES PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/src")
#
#IF (Trilinos_CXX_COMPILER_FLAGS)
#  IF (HWLOC_LIBRARIES)
#    TARGET_LINK_LIBRARIES(GMLS_LIBRARIES ${Kokkos_LIBRARIES} ${KOKKOS_TPL_LIBRARIES} ${HWLOC_LIBRARIES} ${GSL_LIB} ${LAPACK_LIB})
#  ELSE()
#    TARGET_LINK_LIBRARIES(GMLS_LIBRARIES ${Kokkos_LIBRARIES} ${KOKKOS_TPL_LIBRARIES} ${GSL_LIB} ${LAPACK_LIB})
#  ENDIF()
#ELSE()
#  IF (HWLOC_LIBRARIES)
#    TARGET_LINK_LIBRARIES(GMLS_LIBRARIES ${Kokkos_LIBRARIES} ${KOKKOS_EXTRA_LIBS_LIST} ${HWLOC_LIBRARIES} ${GSL_LIB} ${LAPACK_LIB})
#  ELSE()
#    TARGET_LINK_LIBRARIES(GMLS_LIBRARIES ${Kokkos_LIBRARIES} ${KOKKOS_EXTRA_LIBS_LIST} ${GSL_LIB} ${LAPACK_LIB})
#  ENDIF()
#ENDIF()
#
#ADD_SUBDIRECTORY(src/swig)
#ADD_SUBDIRECTORY(test)
#ENDIF(USE_KOKKOS)


bob_end_subdir()
