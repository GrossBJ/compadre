cmake_minimum_required(VERSION 2.8)

#
#   Compadre Details
#
PROJECT(Compadre)
INCLUDE_DIRECTORIES(.)
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
SET( Compadre_VERSION_MAJOR 0)
SET( Compadre_VERSION_MINOR 3)
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/src/Compadre_Config.h.in" "${PROJECT_BINARY_DIR}/src/Compadre_Config.h")
INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}/src")

#
#   CMake Checks
#
IF (CMAKE_VERSION VERSION_LESS "3.1")
  IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    SET (CMAKE_CXX_FLAGS "--std=c++11 ${CMAKE_CXX_FLAGS}")
  ENDIF ()
  IF (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    SET (CMAKE_CXX_FLAGS "--std=c++11 ${CMAKE_CXX_FLAGS}")
  ENDIF ()
ELSE ()
#  SET (CMAKE_CXX_STANDARD 11) 
  SET (CMAKE_CXX_FLAGS "--std=c++11 -fopenmp ${CMAKE_CXX_FLAGS}")
ENDIF ()

#
#   MPI
#   
FIND_PACKAGE(MPI REQUIRED)

#
#   OpenMP
#
FIND_PACKAGE(OpenMP)
IF (OPENMP_FOUND)
	MESSAGE(STATUS "OpenMP found, adding flags ${OpenMP_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	OPTION(USE_OPENMP "Build with OpenMP support" ON)
ELSE()
	MESSAGE(STATUS "CMake WARNING: Could not find OpenMP")
ENDIF()

#
#   BOOST
#
IF (DEFINED COMPADRE_BOOST_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_BOOST_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{BOOST_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{BOOST_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(BOOST_INC boost/wave.hpp)
IF (EXISTS ${BOOST_INC})
	MESSAGE(STATUS "Boost found.")
        MESSAGE("BOOST_INC = ${BOOST_INC}")
	OPTION(USE_BOOST "Build with Boost support" ON)
ELSE()
	MESSAGE(STATUS "Boost NOT FOUND, NOT BEING USED.")
ENDIF()

#
#   GSL
#
#FIND_LIBRARY(SOME_GSL slurm)
#IF (NOT ${SOME_GSL} EQUAL "SOME_GSL-NOTFOUND")
#	#MESSAGE(STATUS "Diff GSL found.")
#	MESSAGE(STATUS "GSL found. ${SOME_GSL}")
#ENDIF()

IF (DEFINED COMPADRE_GSL_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_GSL_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{GSL_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{GSL_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(GSL_INC gsl/gsl_version.h)
IF (EXISTS ${GSL_INC})
	MESSAGE(STATUS "GSL found.")
        MESSAGE("GSL_INC = ${GSL_INC}")
	OPTION(USE_GSL "Build with GSL support" ON)
ELSE()
	MESSAGE(STATUS "GSL NOT FOUND, NOT BEING USED.")
ENDIF()

#
#   HDF5
#
IF (DEFINED COMPADRE_HDF5_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_HDF5_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{HDF5_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{HDF5_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(HDF5_INC hdf5.h)
IF (EXISTS ${HDF5_INC})
  MESSAGE(STATUS "netCDF found.")
  MESSAGE("HDF5_INC = ${HDF5_INC}")
  INCLUDE_DIRECTORIES(${HDF5_INC})
  FIND_LIBRARY(HDF5_LIB hdf5)
  FIND_LIBRARY(HDF5_HL_LIB hdf5_hl)
  MESSAGE("HDF5_LIB = ${HDF5_LIB}")
  SET(CMAKE_CXX_STANDARD_LIBRARIES ${HDF5_LIB})
  #OPTION(USE_HDF5 "Build with HDF5 support" ON)
ELSE()
  MESSAGE("HDF5 NOT FOUND, NOT BEING USED.")
ENDIF()

#
#   NETCDF
#
IF (DEFINED COMPADRE_NETCDF_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_NETCDF_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{NETCDF_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{NETCDF_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(NETCDF_INC netcdf.h)
FIND_PATH(NETCDF_MPI_INC netcdf_par.h)
IF (EXISTS ${NETCDF_INC})
  MESSAGE(STATUS "netCDF found.")
  MESSAGE("NETCDF_INC = ${NETCDF_INC}")
  INCLUDE_DIRECTORIES(${NETCDF_INC})
  FIND_LIBRARY(NETCDF_LIB netcdf)
  MESSAGE("NETCDF_LIB = ${NETCDF_LIB}")
  SET(CMAKE_CXX_STANDARD_LIBRARIES ${NETCDF_LIB})
  OPTION(USE_NETCDF "Build with NetCDF support" ON)
ELSE()
  MESSAGE("NETCDF NOT FOUND, NOT BEING USED.")
ENDIF()
IF (EXISTS ${NETCDF_MPI_INC})
  MESSAGE(STATUS "netCDF with MPI_IO support found.")
  MESSAGE("NETCDF_MPI_INC = ${NETCDF_MPI_INC}")
  OPTION(USE_NETCDF_MPI "Build with NetCDF MPI_IO support" ON)
ELSE()
  MESSAGE("NETCDF MPI_IO NOT FOUND, NOT BEING USED.")
ENDIF()

#
#  PNETCDF
#
IF (DEFINED COMPADRE_PNETCDF_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_PNETCDF_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{PNETCDF_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{PNETCDF_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(PNETCDF_INC pnetcdf.h)
IF (EXISTS ${PNETCDF_INC})
  MESSAGE(STATUS "netCDF found.")
  MESSAGE("PNETCDF_INC = ${PNETCDF_INC}")
  INCLUDE_DIRECTORIES(${PNETCDF_INC})
  FIND_LIBRARY(PNETCDF_LIB pnetcdf)
  MESSAGE("PNETCDF_LIB = ${PNETCDF_LIB}")
  SET(CMAKE_CXX_STANDARD_LIBRARIES ${PNETCDF_LIB})
  OPTION(USE_PNETCDF "Build with pnetcdf support" ON)
ELSE()
  MESSAGE("PNETCDF NOT FOUND, NOT BEING USED.")
ENDIF()

#
#   VTK
#
IF (DEFINED COMPADRE_VTK_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_VTK_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{VTK_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{VTK_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PACKAGE(VTK)
IF (VTK_FOUND)
	INCLUDE(${VTK_USE_FILE})

	MESSAGE("\nFound VTK!  Here are the details: ")
	MESSAGE("   VTK_DIR = ${VTK_DIR}")
	MESSAGE("   VTK_VERSION = ${VTK_VERSION}")
	MESSAGE("   VTK_LIBRARIES = ${VTK_LIBRARIES}")
	#SET($ENV{DYLD_LIBRARY_PATH} $ENV{DYLD_LIBRARY_PATH}:${VTK_LIBRARY_DIRS})
        OPTION(USE_VTK "Build with VTK support" ON)
ELSE()
	MESSAGE(STATUS "WARNING: could not find VTK.")
ENDIF()

#
#   Trilinos
#
IF (DEFINED COMPADRE_TRILINOS_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_TRILINOS_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{TRILINOS_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{TRILINOS_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PACKAGE(Trilinos)
IF (Trilinos_FOUND)
#	LIST(REVERSE Trilinos_TPL_INCLUDE_DIRS)
#	LIST(REMOVE_DUPLICATES Trilinos_TPL_INCLUDE_DIRS)
#	LIST(REVERSE Trilinos_TPL_INCLUDE_DIRS)
	
	LIST(REVERSE Trilinos_LIBRARIES)
	LIST(REMOVE_DUPLICATES Trilinos_LIBRARIES)
	LIST(REVERSE Trilinos_LIBRARIES)

	LIST(REVERSE Trilinos_TPL_LIBRARIES)
	LIST(REMOVE_DUPLICATES Trilinos_TPL_LIBRARIES)
	LIST(REVERSE Trilinos_TPL_LIBRARIES)
	
	MESSAGE("\nFound Trilinos!  Here are the details: ")
	MESSAGE("   Trilinos_DIR = ${Trilinos_DIR}")
	MESSAGE("   Trilinos_VERSION = ${Trilinos_VERSION}")
	MESSAGE("   Trilinos_PACKAGE_LIST = ${Trilinos_PACKAGE_LIST}")
	MESSAGE("   Trilinos_LIBRARIES = ${Trilinos_LIBRARIES}")
	MESSAGE("   Trilinos_BIN_DIRS = ${Trilinos_BIN_DIRS}")
	MESSAGE("   Trilinos_INCLUDE_DIRS = ${Trilinos_INCLUDE_DIRS}")
	MESSAGE("   Trilinos_LIBRARY_DIRS = ${Trilinos_LIBRARY_DIRS}")
	MESSAGE("   Trilinos_TPL_LIST = ${Trilinos_TPL_LIST}")
	MESSAGE("   Trilinos_TPL_INCLUDE_DIRS = ${Trilinos_TPL_INCLUDE_DIRS}")
	MESSAGE("   Trilinos_TPL_LIBRARIES = ${Trilinos_TPL_LIBRARIES}")
	MESSAGE("   Trilinos_TPL_LIBRARY_DIRS = ${Trilinos_TPL_LIBRARY_DIRS}")
	MESSAGE("   Trilinos_BUILD_SHARED_LIBS = ${Trilinos_BUILD_SHARED_LIBS}")
	MESSAGE("   Trilinos_CXX_COMPILER_FLAGS = ${Trilinos_CXX_COMPILER_FLAGS}")
	MESSAGE("End of Trilinos details\n")
	
	LIST(REVERSE Trilinos_INCLUDE_DIRS)
	LIST(REMOVE_DUPLICATES Trilinos_INCLUDE_DIRS)
	LIST(REVERSE Trilinos_INCLUDE_DIRS)
	MESSAGE("   Trilinos_INCLUDE_DIRS = ${Trilinos_INCLUDE_DIRS}")
	
	LIST(FIND Trilinos_PACKAGE_LIST Kokkos KokkosTrilinosID)
	IF (KokkosTrilinosID GREATER -1 )
		MESSAGE(STATUS "Found Kokkos inside Trilinos!")
#		MESSAGE(STATUS "KOKKOS LIBRARIES : " ${Trilinos_Kokkos_LIBRARIES})
	ELSE()
		MESSAGE(FATAL_ERROR "Found Trilinos but could not find Kokkos.")
	ENDIF()
	
	LIST(FIND Trilinos_PACKAGE_LIST Zoltan2 Zoltan2TrilinosID)
	IF (Zoltan2TrilinosID GREATER -1 )
		MESSAGE(STATUS "Found Zoltan2 inside Trilinos!")
	ELSE()
		MESSAGE(FATAL_ERROR "Found Trilinos but could not find Zoltan2.")
	ENDIF()
	
	ADD_DEFINITIONS(-DHAVE_TRILINOS)
	
	# SET($ENV{DYLD_LIBRARY_PATH} ${Trilinos_LIBRARY_DIRS}:$ENV{DYLD_LIBRARY_PATH})
	
ELSE()
	MESSAGE(STATUS "WARNING: could not find Trilinos.")
ENDIF()
INCLUDE_DIRECTORIES(${Trilinos_INCLUDE_DIRS}, ${Trilinos_TPL_INCLUDE_DIRS})

#
#	Nanoflann include
#	
IF (DEFINED COMPADRE_NANOFLANN_DIR)
  SET(CMAKE_PREFIX_PATH ${COMPADRE_NANOFLANN_DIR} ${CMAKE_PREFIX_PATH})
ELSE()
  IF (DEFINED ENV{NANOFLANN_ROOT})
    SET(CMAKE_PREFIX_PATH $ENV{NANOFLANN_ROOT} ${CMAKE_PREFIX_PATH})
  ENDIF()
ENDIF()
FIND_PATH(NANOFLANN_INC nanoflann.hpp)
IF (EXISTS ${NANOFLANN_INC})
  MESSAGE("NANOFLANN_INC = ${NANOFLANN_INC}")
  INCLUDE_DIRECTORIES(${NANOFLANN_INC})
  OPTION(USE_NANOFLANN "Build with Nanoflann support" ON)
ELSE()
  MESSAGE("NANOFLANN NOT FOUND, NOT BEING USED.")
ENDIF()

#
#       Includes GSL Libraries
#       Builds GMLS library
#
ADD_SUBDIRECTORY(GMLS)
SET(GMLS_INCLUDE_DIRS GMLS/src)

#
#       Build COMPADRE library
#
FILE(GLOB COMPADRE_CPPFILES ./src/*.cpp ./src/problems/*.cpp)
ADD_LIBRARY(COMPADRE_LIBRARIES STATIC ${COMPADRE_CPPFILES})
TARGET_INCLUDE_DIRECTORIES(COMPADRE_LIBRARIES PUBLIC ${Trilinos_INCLUDE_DIRS} ${GMLS_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} ${VTK_LIBRARIES} ${GMLS_LIBRARIES})

IF (USE_VTK)
TARGET_LINK_LIBRARIES(COMPADRE_LIBRARIES ${VTK_LIBRARIES})
ENDIF()

IF (USE_NETCDF)
MESSAGE(STATUS "NETCDF_LIB: ${NETCDF_LIB}")
TARGET_LINK_LIBRARIES(COMPADRE_LIBRARIES ${PNETCDF_LIB} ${NETCDF_LIB} ${HDF5_LIB} ${HDF5_HL_LIB})
#ELSE ()
#SET ( NETCDF_LIB "" )
ENDIF()

TARGET_LINK_LIBRARIES(COMPADRE_LIBRARIES "-lgfortran")

SET(COMPADRE_INCLUDE_DIRS src)
INCLUDE_DIRECTORIES(${COMPADRE_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${COMPADRE_INCLUDE_DIRS}/problems)

#
#	Executables
#
ADD_EXECUTABLE(GMLS_Laplacian_Test.exe CompadreGMLSTest.cpp)
TARGET_LINK_LIBRARIES(GMLS_Laplacian_Test.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)

ADD_EXECUTABLE(tpetraCoordsTest.exe CompadreTrilinosTest.cpp)
TARGET_LINK_LIBRARIES(tpetraCoordsTest.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)

ADD_EXECUTABLE(kdtreeTest.exe Compadre_KdTreeTest.cpp)
TARGET_LINK_LIBRARIES(kdtreeTest.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)

ADD_EXECUTABLE(readerTest.exe Compadre_SphReaderTest.cpp)
TARGET_LINK_LIBRARIES(readerTest.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)

ADD_EXECUTABLE(parallelReader.exe Compadre_ParallelReaderTest.cpp)
TARGET_LINK_LIBRARIES(parallelReader.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)

ADD_EXECUTABLE(spherePoisson.exe Compadre_SpherePoissonTest.cpp)
TARGET_LINK_LIBRARIES(spherePoisson.exe COMPADRE_LIBRARIES GMLS_LIBRARIES)

ADD_EXECUTABLE(simpleCoordsTest.exe Compadre_SimpleCoordsUnitTest.cpp)
TARGET_LINK_LIBRARIES(simpleCoordsTest.exe COMPADRE_LIBRARIES)

ADD_EXECUTABLE(simpleMPITest.exe Compadre_SimpleMPIUnitTest.cpp)
TARGET_LINK_LIBRARIES(simpleMPITest.exe COMPADRE_LIBRARIES)

ADD_EXECUTABLE(remapTest.exe Compadre_RemapTest.cpp)
TARGET_LINK_LIBRARIES(remapTest.exe COMPADRE_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_TPL_LIBRARIES} GMLS_LIBRARIES)
#
#
#	Custom build targets
#
ADD_CUSTOM_TARGET(compadre)
ADD_DEPENDENCIES(compadre COMPADRE_LIBRARIES)

ADD_CUSTOM_TARGET(unit)
ADD_DEPENDENCIES(unit simpleCoordsTest.exe simpleMPITest.exe)

ADD_CUSTOM_TARGET(regression)
ADD_DEPENDENCIES(regression tpetraCoordsTest.exe kdtreeTest.exe readerTest.exe spherePoisson.exe)

ADD_CUSTOM_TARGET(gmls)
ADD_DEPENDENCIES(gmls GMLS_Laplacian_Test.exe)

ADD_CUSTOM_TARGET(parallel)
ADD_DEPENDENCIES(parallel parallelReader.exe)

ADD_CUSTOM_TARGET(remap)
ADD_DEPENDENCIES(remap remapTest.exe)
#
#
#	Testing
#
## When executing these with OMP, it makes sense to add --bind-to-none or --bind-to none in order to not restrict threads to cores
ENABLE_TESTING()
ADD_SUBDIRECTORY(tests)

